// Generated by Dagger (https://dagger.dev).
package com.abdrakhmanovartem.network_impl.dagger;

import com.google.gson.Gson;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerNetworkComponent implements NetworkComponent {
  private Provider<Gson> provideGsonProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private DaggerNetworkComponent() {

    initialize();
  }

  public static NetworkComponent.Factory factory() {
    return new Factory();
  }

  public static NetworkComponent create() {
    return new Factory().create();
  }

  @SuppressWarnings("unchecked")
  private void initialize() {
    this.provideGsonProvider = DoubleCheck.provider(NetworkModule_ProvideGsonFactory.create());
    this.provideOkHttpClientProvider = DoubleCheck.provider(NetworkModule_ProvideOkHttpClientFactory.create());
    this.provideRetrofitProvider = DoubleCheck.provider(NetworkModule_ProvideRetrofitFactory.create(provideOkHttpClientProvider, provideGsonProvider));
  }

  @Override
  public Gson provideGson() {
    return provideGsonProvider.get();
  }

  @Override
  public OkHttpClient provideOkHttpClient() {
    return provideOkHttpClientProvider.get();
  }

  @Override
  public Retrofit provideRetrofit() {
    return provideRetrofitProvider.get();
  }

  private static final class Factory implements NetworkComponent.Factory {
    @Override
    public NetworkComponent create() {
      return new DaggerNetworkComponent();
    }
  }
}
